/// <summary>
/// Библиотека математических классов, написанная Опасным Пасей (Дмитрией Пасько/Деметрием Паскалём).
/// Начал писать примерно в конце февраля 2018-го, с класса полиномов.
/// С конца января 2019-го пишу продолжение библиотеки (МатКлассы),
/// в текущую библиотеку иногда добавляю новый функционал.
/// Сильные стороны библиотеки: классы комплексный чисел, векторов, полиномов,
/// матриц, методов интегрирования, графов (особое внимание), СЛАУ, методы расширения
/// Недостатки: мало где заботился об исключениях, содержимое методов почти не комментрируется,
/// в классе СЛАУ из-за диплома, вышедшего с С++, есть слишком сложные низкоуровневые методы
/// и путаница из-за тесной связи с классом кривых, 
/// класс вероятностей начал из эксперимента и почти ничего не написал,
/// очень много открытых полей и методов,
/// почти не проводил тестирование,
/// но большинство методов использовались в визуальных приложениях
/// и так были отлажены
/// Всё написал сам, кроме 3-5% кода, взятого из открытых источников
/// 
/// ------------Контакты:
/// Telegram: 8 961 519 36 46 (на звонки не отвечаю)
/// Mail:     qtckpuhdsa@gmail.com
/// Discord:  Пася Опасен#3065
/// VK:       https://vk.com/roman_disease
/// Steam:    https://vk.com/away.php?to=https%3A%2F%2Fsteamcommunity.com%2Fid%2FPasaOpasen&cc_key=
///      Активно пользуюсь всеми указанными сервисами
/// </summary>
namespace МатКлассы
{
    /// <summary>
    /// Класс кратных узлов
    /// </summary>
    public class MultipleKnot
    {
        /// <summary>
        /// Абцисса кратного узла
        /// </summary>
        public double x;
        /// <summary>
        /// Массив ординат кратного узла
        /// </summary>
        public double[] y;

        /// <summary>
        /// Полный конструктор
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        public MultipleKnot(double x, params double[] y)
        {
            this.x = x;
            this.y = new double[y.Length];
            for (int i = 0; i < y.Length; i++) this.y[i] = y[i];
        }

        /// <summary>
        /// Кратность узла
        /// </summary>
        public int Multiplicity { get { return this.y.Length; } }

    }
}

